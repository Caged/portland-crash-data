<div class="container">
  <div class="js-stats"></div>
</div>
<style media="screen">
  .causes {
    border: 1px solid #ccc;
    display: inline-block;
    margin: 20px;
    border-radius: 3px;
  }

  .domain {
    display: none;
  }

  .title {
    fill: orange;
    font-weight: bold;
    font-size: 14px;
  }

  .subtitle {
    font-weight: bold;
    font-size: 12px;
    fill: #333;
  }

  .val {
    fill: orangered;
  }

  .credit, .date {
    font-size: 10px;
    fill: #999;
    text-anchor: end;
  }

  .date {
    text-anchor: start;
  }

  rect {
    fill: orangered;
  }

  .x text {
    fill: #a00;
  }

  .tick line {
    stroke: #ddd;
    shape-rendering: crispedges;
    stroke-width:1;
  }

  .vtick text {
    font-size: 10px;
  }

  .line {
    fill: none;
    stroke: orangered;
  }
</style>
<script charset="utf-8">
  d3.json('/stats_data', function(err, data) {
    console.log(data);
    var margin = { top: 60, left: 25, bottom: 25, right: 25 },
        width   = parseFloat(d3.select('.js-stats').style('width')) - margin.left - margin.right,
        height  = 400 - margin.top - margin.bottom

    function renderBar(vis, localmargin, data) {
      var localwidth  = parseFloat(vis.node().style.width) - localmargin.left - localmargin.right,
          transform   = d3.transform(vis.attr('transform'))

      vis.attr('transform', 'translate(' + (transform.translate[0] + localmargin.left) + ',' + localmargin.top + ')')

      var movements = data.filter(function(c) { return c.percent >= 1 })
      movements.sort(function(a, b) { return d3.ascending(a.count, b.count) })
      movements.unshift({name: 'Other', percent: 100 - d3.sum(movements, function(d) { return d.percent }) })

      var extent = d3.extent(movements, function(d) { return d.percent }),
          min = extent[0],
          max = extent[1]

      var y = d3.scale.ordinal().domain(d3.range(movements.length)).rangeBands([height, 0], 0.2),
          x = d3.scale.linear().domain([0, 100]).range([0, localwidth])

      var yax = d3.svg.axis()
        .scale(y)
        .orient('left')
        .tickFormat(function(d) {
          var label = movements[d].name
          if(label.length > 20)
            return movements[d].name.substring(0,20) + '...'
          else
            return label
        })

      var xax = d3.svg.axis()
        .orient('top')
        .tickSize(height)
        .tickFormat(function(d) {
          return d === 0 ? d + '%' : d
        })
        .scale(x)

      vis.append('g')
        .call(yax)

      vis.append('g')
        .attr('class', 'x')
        .attr('transform', 'translate(0, ' + height + ')')
        .call(xax)

      var movement = vis.selectAll('.cause')
        .data(movements)
      .enter().append('g')
        .attr('class', 'cause')
        .attr('transform', function(d, i) {
          return 'translate(0, ' + y(i) + ')'
        })

      movement.append('rect')
        .attr('width', function(d) { return x(d.percent) })
        .attr('height', y.rangeBand())

      movement.append('text')
        .attr('class', 'val')
        .attr('x', function(d) { return x(d.percent) + 5 })
        .attr('y', y.rangeBand() / 2 + 5)
        .text(function(d) { return d.count })
    }

    function renderTimeSeries(vis, localmargin, data) {
      var format = d3.time.format('%W-%Y')

      data.forEach(function(d) { d.date = new Date(d.date) })

      var weeks = d3.nest()
        .key(function(d) { return format(d.date) })
        .rollup(function(vals) {
          return {
            sum: d3.sum(vals, function(d) { return d.count }),
            week: vals[0].date
          }
         })
        .entries(data)

      var localwidth  = parseFloat(vis.node().style.width) - localmargin.left - localmargin.right,
          localheight = height - localmargin.top - localmargin.bottom
          transform   = d3.transform(vis.attr('transform')),
          to = data[0].date,
          from = data[data.length - 1].date

      vis.attr('transform', 'translate(' + (transform.translate[0] + localmargin.left) + ',' + localmargin.top + ')')

      var max = d3.max(weeks, function(d) { return d.values.sum }),
          x = d3.scale.ordinal().domain(d3.range(weeks.length)).rangeBands([0, localwidth], 0.2),
          y = d3.scale.linear().domain([0, max]).range([localheight, 0])

      var xax = d3.svg.axis()
        .scale(x)
        .tickFormat(function(d) {
          var date = weeks[d].values.week
          return d3.time.format('%m/%d/%y')(date)
        })

      var week = vis.selectAll('.week')
        .data(weeks)
      .enter().append('g')
        .attr('class', 'cause')
        .attr('transform', function(d, i) {
          return 'translate(' + x(i) + ',0)'
        })

      week.append('rect')
        .attr('width', x.rangeBand())
        .attr('height', function(d) { return localheight - y(d.values.sum) })
        .attr('y', function(d) { return y(d.values.sum) })

      vis.append('g')
        .attr('class', 'vtick')
        .attr('transform', 'translate(0,' + localheight + ')')
        .call(xax)
      .selectAll('text')
        .attr('dx', 5)
        .attr('transform', 'rotate(90)')
        .style('text-anchor', 'start')

    }

    // Render movement data
    //
    // data - key,val data object
    //
    // Returns nothing
    function renderMovements(vis, data) {
      var localmargin = { top: 0, left: 100, right: 20, bottom: 0 }
      renderBar(vis, localmargin, data)
    }

    function renderCauses(vis, data) {
      var localmargin = { top: 0, left: 130, right: 20, bottom: 0 }
      renderBar(vis, localmargin, data)
    }

    function renderVehicles(vis, data) {
      var localmargin = { top: 0, left: 170, right: 20, bottom: 0 }
      renderBar(vis, localmargin, data)
    }

    function renderErrors(vis, data) {
      var localmargin = { top: 0, left: 130, right: 20, bottom: 0 }
      renderBar(vis, localmargin, data)
    }

    function renderEvents(vis, data) {
      var localmargin = { top: 0, left: 130, right: 20, bottom: 0 }
      renderBar(vis, localmargin, data)
    }

    function renderSections(vis, data) {
      var localmargin = { top: 0, left: 130, right: 20, bottom: 0 }
      renderBar(vis, localmargin, data)
    }

    function renderStreets(vis, data) {
      var localmargin = { top: 0, left: 130, right: 20, bottom: 0 }
      renderBar(vis, localmargin, data)
    }

    function renderIntersectingStreets(vis, data) {
      var localmargin = { top: 0, left: 130, right: 20, bottom: 0 }
      renderBar(vis, localmargin, data)
    }

    function renderTimeline(vis, data) {
      var localmargin = { top: 20, left: 20, right: 0, bottom: 60 }
      renderTimeSeries(vis, localmargin, data)
    }

    var render = {
      movements: renderMovements,
      causes: renderCauses,
      vehicles: renderVehicles,
      errors: renderErrors,
      events: renderEvents,
      sections: renderSections,
      streets: renderStreets,
      intersecting_streets: renderIntersectingStreets,
      time_series: renderTimeline
    }

    var types = Object.keys(data)
    types.forEach(function(type) {
      var vis = d3.select('.js-stats').append('div').append('svg')
        .attr('width', width + margin.left + margin.right)
        .attr('height', height + margin.top + margin.bottom)
      .append('g')
        .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')

      vis.append('text')
        .attr('class', 'title')
        .attr('y', -20)
        .text(type)

      var datapoints = Object.keys(data[type])
      datapoints.forEach(function(dp, idx) {
        var container = vis.append('g')
          .attr('class', dp)
          .attr('transform', 'translate(' + (width / datapoints.length * idx) + ',0)')
          .style('width', (width / datapoints.length) + 'px')

        container.append('text')
          .attr('class', 'subtitle')
          .attr('x', -10)
          .attr('y', -20)
          .text(dp)

        render[dp].call(this, container, data[type][dp])
      })
    })
  })
</script>
